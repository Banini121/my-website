const express = require('express'),
    router = express.Router()
const UserModel = require("../models/user");
const {v4: uuidv4} = require("uuid");
const nodemailer = require("nodemailer");
const path = require("path");
const acceptEmailModel = require("../models/accept_email");
const PostModel = require("../models/post");
const cookieParser = require("cookie-parser");
require('dotenv').config();
router.use(cookieParser());

router.post('/auth/login', async (req, res) => {
    const { email, password } = req.body;
    try {
        const user = await UserModel.findOne({ email, password });
        console.log(user)

        if (user) {
            res.cookie('_id', user.id, { maxAge: 900000 });

            res.redirect('/profile');

        } else {
            res.json({
                success: false,
                message: '–ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø–∞—Ä–æ–ª—å.',
            });
        }
    } catch (error) {
        res.status(500).json({
            success: false,
            message: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞.',
        });
        console.log(error)
    }
});

router.post('/auth/register', async (req, res) => {
    const randomID = uuidv4();
    // –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∏—Å–µ–º
    const transporter = nodemailer.createTransport({
        host: 'smtp.mail.ru',
        port: 465,
        secure: true,
        auth: {
            user: process.env.MAIL_LOGIN,
            pass: process.env.MAIL_PASS
        }
    });

    // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –ø–∏—Å—å–º–∞
    const mailOptions = {
        from: process.env.MAIL_LOGIN,
        to: req.body.email,
        subject: '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ —Å–∞–π—Ç–µ - http://localhost:3000/',
        html: `
      <h1>–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, —É–≤–∞–∂–∞–µ–º—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.</h1>
      <p>–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –≤–∞—Å –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –Ω–∞ –Ω–∞—à–µ–º –≤–µ–±-—Å–∞–π—Ç–µ.</p>
      <p>–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –Ω–∞—à–∏–º —Å–∞–π—Ç–æ–º, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤–∞—à—É —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É—é –ø–æ—á—Ç—É.</p>
      <p>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤–∞—à—É –ª–∏—á–Ω–æ—Å—Ç—å. –°—Å—ã–ª–∫–∞ –±—É–¥–µ—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ 5 –º–∏–Ω—É—Ç.</p>
      <p><a href="http://localhost:3000/auth/accept/${randomID}">http://localhost:3000/auth/${randomID}</a></p>
      <p>–ï—Å–ª–∏ –≤—ã –Ω–µ –ø—ã—Ç–∞–ª–∏—Å—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à–µ–º —Å–∞–π—Ç–µ, –ø—Ä–∏–Ω–æ—Å–∏–º —Å–≤–æ–∏ –∏–∑–≤–∏–Ω–µ–Ω–∏—è –∑–∞ –≤–æ–∑–º–æ–∂–Ω–æ–µ –±–µ—Å–ø–æ–∫–æ–π—Å—Ç–≤–æ.</p>
      <p>–° —É–≤–∞–∂–µ–Ω–∏–µ–º,<br>–†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ —Å–∞–π—Ç–∞.</p>
    `
    };

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∏—Å—å–º–æ
    transporter.sendMail(mailOptions, async (error, info) => {
        if (error) {
            console.log('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–∏—Å—å–º–∞:', error);
            res.render('./pages/log-reg.ejs', {msg: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–∏—Å—å–º–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ.'});
        } else {
            console.log('–ü–∏—Å—å–º–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!', info.response);
            const doc = new acceptEmailModel({
                id: randomID,
                login: req.body.login,
                email: req.body.email,
                password: req.body.password
            })
            const emailsave = await doc.save()

            res.render('./pages/log-reg.ejs', {msg: `<p>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —É–∫–∞–∑–∞–Ω–Ω—É—é –ø–æ—á—Ç—É –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏ —Å–ª–µ–¥—É–π—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–∏–º —É–∫–∞–∑–∞–Ω–∏—è–º. <br>–ï—Å–ª–∏ –Ω–µ—Ç –ø–∏—Å—å–º–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–∞–ø–∫—É "–°–ø–∞–º".</p>`});

        }
    });
});

router.post('/data/nickname', async (req, res) => {
    const id = req.cookies._id;
    const { nickname } = req.body;

    try {
        // –ù–∞–π–¥–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID –∏ –æ–±–Ω–æ–≤–∏—Ç–µ –µ–≥–æ nickname
        const updatedUser = await UserModel.findOneAndUpdate(
            { id: id },
            { login: nickname },
            { new: true }
        );

        res.redirect('/profile');
    } catch (error) {
        res.status(500).json({ error: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö' });
    }
});

router.post('/data/email', async (req, res) => {
    const id = req.cookies._id;
    const { email } = req.body;

    try {
        // –ù–∞–π–¥–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID –∏ –æ–±–Ω–æ–≤–∏—Ç–µ –µ–≥–æ nickname
        const updatedUser = await UserModel.findOneAndUpdate(
            { id: id },
            { email: email },
            { new: true }
        );

        res.redirect('/profile');
    } catch (error) {
        res.status(500).json({ error: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö' });
    }
});

router.post('/data/password', async (req, res) => {
    const id = req.cookies._id;
    const { password } = req.body;

    try {
        // –ù–∞–π–¥–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID –∏ –æ–±–Ω–æ–≤–∏—Ç–µ –µ–≥–æ nickname
        const updatedUser = await UserModel.findOneAndUpdate(
            { id: id },
            { password: password },
            { new: true }
        );

        res.redirect('/profile');
    } catch (error) {
        res.status(500).json({ error: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö' });
    }
});

router.post('/create/post-anons', async (req, res) => {
    const id = req.cookies._id;
    const randomID = uuidv4();
    const { event_name, event_date_time } = req.body;
    console.log(req.body)
    const user = await UserModel.findOne({ id });

    const doc = new PostModel({
        id: randomID,
        type: 1,
        user_id: user.id,
        post_name: '–ê–Ω–æ–Ω—Å –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è',
        post_mp: event_name,
        post_data: event_date_time,
    })
    const postsave = await doc.save()

    if (doc) {
        // URL –≤–µ–±-—Ö—É–∫–∞ Discord
        const webhookUrl = 'https://discord.com/api/webhooks/1117540062071099513/DNjpAxq82O2fLKgVjFRrP9mFnzDIHT-88OKfrF3TSOXBGWDEcfv1jsJ77Q2AYBEhMWDT';

        // JSON-—Ç–µ–ª–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –≤–ª–æ–∂–µ–Ω–Ω—ã–º (embed) —Å–æ–æ–±—â–µ–Ω–∏–µ–º
        const message = {
          embeds: [
            {
              title: 'üéâ –ê–Ω–æ–Ω—Å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –ú–∞—Ñ–∏—è', // –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏—è (–∂–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç + –±–æ–ª—å—à–æ–π –∑–∞–≥–æ–ª–æ–≤–æ–∫)
              description: `
              > ${user.login} –Ω–∞–∑–Ω–∞—á–∏–ª –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ "${event_name}" –Ω–∞ ${event_date_time} (–ü–û –ú–°–ö)\n\n–ü—Ä–∏–∑:\n–£—Ç–æ—á–Ω—è—Ç—å —É –≤–µ–¥—É—â–∏—Ö`, // –û–ø–∏—Å–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
              color: 16711680 // –ö—Ä–∞—Å–Ω—ã–π —Ü–≤–µ—Ç –≤ —à–µ—Å—Ç–Ω–∞–¥—Ü–∞—Ç–µ—Ä–∏—á–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
            }
          ]
        };

        // –û–ø—Ü–∏–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞
        const options = {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify(message)
        };

        // –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≤–µ–±-—Ö—É–∫ Discord
        fetch(webhookUrl, options)
          .then(response => {
            if (response.ok) {
              console.log('–°–æ–æ–±—â–µ–Ω–∏–µ —Å Embed –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!');
            } else {
              console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å Embed:', response.statusText);
            }
          })
          .catch(error => {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å Embed:', error);
          });
        }

    res.redirect('/profile');
});

router.post('/create/post-news', async (req, res) => {
    const id = req.cookies._id;
    const randomID = uuidv4();
    const { event_name, editor_content } = req.body;

    const user = await UserModel.findOne({ id });

    const doc = new PostModel({
        id: randomID,
        type: 2,
        user_id: user.id,
        post_name: event_name,
        post_content: editor_content,
        post_mp: '',
        post_data: '',
    })
    const postsave = await doc.save()

    res.redirect('/profile');
});

module.exports = router